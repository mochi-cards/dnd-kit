{"version":3,"file":"utilities.cjs.production.min.js","sources":["../src/execution-context/canUseDOM.ts","../src/type-guards/isWindow.ts","../src/type-guards/isNode.ts","../src/execution-context/getWindow.ts","../src/type-guards/isDocument.ts","../src/type-guards/isHTMLElement.ts","../src/hooks/useIsomorphicLayoutEffect.ts","../src/hooks/useUniqueId.ts","../src/adjustment.ts","../src/event/hasViewportRelativeCoordinates.ts","../src/event/isTouchEvent.ts","../src/css.ts","../src/coordinates/getEventCoordinates.ts","../src/execution-context/getOwnerDocument.ts","../src/event/isKeyboardEvent.ts","../src/type-guards/isSVGElement.ts","../src/hooks/useCombinedRefs.ts","../src/hooks/useInterval.ts","../src/hooks/useLazyMemo.ts","../src/hooks/useNodeRef.ts"],"sourcesContent":["// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nexport const canUseDOM =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined';\n","export function isWindow(element: Object): element is typeof window {\n  let str = Object.prototype.toString.call(element)\n  return str === '[object Window]' || str === '[object global]';\n}\n","export function isNode(node: Object): node is Node {\n  return 'nodeType' in node;\n}\n","import {isWindow} from '../type-guards/isWindow';\nimport {isNode} from '../type-guards/isNode';\n\nexport function getWindow(target: Event['target']): typeof window {\n  if (!target) {\n    return window;\n  }\n\n  if (isWindow(target)) {\n    return target;\n  }\n\n  if (!isNode(target)) {\n    return window;\n  }\n\n  return target.ownerDocument?.defaultView ?? window;\n}\n","import {getWindow} from '../execution-context/getWindow';\n\nexport function isDocument(node: Node): node is Document {\n  const {Document} = getWindow(node);\n\n  return node instanceof Document;\n}\n","import {getWindow} from '../execution-context/getWindow';\n\nimport {isWindow} from './isWindow';\n\nexport function isHTMLElement(node: Node | Window): node is HTMLElement {\n  if (isWindow(node)) {\n    return false;\n  }\n\n  return node instanceof getWindow(node).HTMLElement;\n}\n","import {useEffect, useLayoutEffect} from 'react';\n\nimport {canUseDOM} from '../execution-context';\n\n/**\n * A hook that resolves to useEffect on the server and useLayoutEffect on the client\n * @param callback {function} Callback function that is invoked when the dependencies of the hook change\n */\nexport const useIsomorphicLayoutEffect = canUseDOM\n  ? useLayoutEffect\n  : useEffect;\n","import {useMemo} from 'react';\n\nlet ids: Record<string, number> = {};\n\nexport function useUniqueId(prefix: string, value?: string) {\n  return useMemo(() => {\n    if (value) {\n      return value;\n    }\n\n    const id = ids[prefix] == null ? 0 : ids[prefix] + 1;\n    ids[prefix] = id;\n\n    return `${prefix}-${id}`;\n  }, [prefix, value]);\n}\n","function createAdjustmentFn(modifier: number) {\n  return <T extends Record<U, number>, U extends string>(\n    object: T,\n    ...adjustments: Partial<T>[]\n  ): T => {\n    return adjustments.reduce<T>(\n      (accumulator, adjustment) => {\n        const entries = Object.entries(adjustment) as [U, number][];\n\n        for (const [key, valueAdjustment] of entries) {\n          const value = accumulator[key];\n\n          if (value != null) {\n            accumulator[key] = (value + modifier * valueAdjustment) as T[U];\n          }\n        }\n\n        return accumulator;\n      },\n      {\n        ...object,\n      }\n    );\n  };\n}\n\nexport const add = createAdjustmentFn(1);\nexport const subtract = createAdjustmentFn(-1);\n","export function hasViewportRelativeCoordinates(\n  event: Event\n): event is Event & Pick<PointerEvent, 'clientX' | 'clientY'> {\n  return 'clientX' in event && 'clientY' in event;\n}\n","import {getWindow} from '../execution-context';\n\nexport function isTouchEvent(\n  event: Event | undefined | null\n): event is TouchEvent {\n  if (!event) {\n    return false;\n  }\n\n  const {TouchEvent} = getWindow(event.target);\n\n  return TouchEvent && event instanceof TouchEvent;\n}\n","export type Transform = {\n  x: number;\n  y: number;\n  scaleX: number;\n  scaleY: number;\n};\n\nexport interface Transition {\n  property: string;\n  easing: string;\n  duration: number;\n}\n\nexport const CSS = Object.freeze({\n  Translate: {\n    toString(transform: Transform | null) {\n      if (!transform) {\n        return;\n      }\n\n      const {x, y} = transform;\n\n      return `translate3d(${x ? Math.round(x) : 0}px, ${\n        y ? Math.round(y) : 0\n      }px, 0)`;\n    },\n  },\n  Scale: {\n    toString(transform: Transform | null) {\n      if (!transform) {\n        return;\n      }\n\n      const {scaleX, scaleY} = transform;\n\n      return `scaleX(${scaleX}) scaleY(${scaleY})`;\n    },\n  },\n  Transform: {\n    toString(transform: Transform | null) {\n      if (!transform) {\n        return;\n      }\n\n      return [\n        CSS.Translate.toString(transform),\n        CSS.Scale.toString(transform),\n      ].join(' ');\n    },\n  },\n  Transition: {\n    toString({property, duration, easing}: Transition) {\n      return `${property} ${duration}ms ${easing}`;\n    },\n  },\n});\n","import type {Coordinates} from './types';\nimport {isTouchEvent, hasViewportRelativeCoordinates} from '../event';\n\n/**\n * Returns the normalized x and y coordinates for mouse and touch events.\n */\nexport function getEventCoordinates(event: Event): Coordinates {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      const {clientX: x, clientY: y} = event.touches[0];\n\n      return {\n        x,\n        y,\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      const {clientX: x, clientY: y} = event.changedTouches[0];\n\n      return {\n        x,\n        y,\n      };\n    }\n  }\n\n  if (hasViewportRelativeCoordinates(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n  };\n}\n","import {isWindow, isHTMLElement, isDocument, isNode} from '../type-guards';\n\nexport function getOwnerDocument(target: Event['target']): Document {\n  if (!target) {\n    return document;\n  }\n\n  if (isWindow(target)) {\n    return target.document;\n  }\n\n  if (!isNode(target)) {\n    return document;\n  }\n\n  if (isDocument(target)) {\n    return target;\n  }\n\n  if (isHTMLElement(target)) {\n    return target.ownerDocument;\n  }\n\n  return document;\n}\n","import {getWindow} from '../execution-context';\n\nexport function isKeyboardEvent(\n  event: Event | undefined | null\n): event is KeyboardEvent {\n  if (!event) {\n    return false;\n  }\n\n  const {KeyboardEvent} = getWindow(event.target);\n\n  return KeyboardEvent && event instanceof KeyboardEvent;\n}\n","import {getWindow} from '../execution-context/getWindow';\n\nexport function isSVGElement(node: Node): node is SVGElement {\n  return node instanceof getWindow(node).SVGElement;\n}\n","import {useMemo} from 'react';\n\nexport function useCombinedRefs<T>(\n  ...refs: ((node: T) => void)[]\n): (node: T) => void {\n  return useMemo(\n    () => (node: T) => {\n      refs.forEach((ref) => ref(node));\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import {useCallback, useRef} from 'react';\n\nexport function useInterval() {\n  const intervalRef = useRef<number | null>(null);\n\n  const set = useCallback((listener: Function, duration: number) => {\n    intervalRef.current = setInterval(listener, duration);\n  }, []);\n\n  const clear = useCallback(() => {\n    if (intervalRef.current !== null) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n\n  return [set, clear] as const;\n}\n","import {useMemo, useRef} from 'react';\n\nexport function useLazyMemo<T>(\n  callback: (prevValue: T | undefined) => T,\n  dependencies: any[]\n) {\n  const valueRef = useRef<T>();\n\n  return useMemo(\n    () => {\n      const newValue = callback(valueRef.current);\n      valueRef.current = newValue;\n\n      return newValue;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...dependencies]\n  );\n}\n","import {useRef, useCallback} from 'react';\n\nexport function useNodeRef() {\n  const node = useRef<HTMLElement | null>(null);\n  const setNodeRef = useCallback((element: HTMLElement | null) => {\n    node.current = element;\n  }, []);\n\n  return [node, setNodeRef] as const;\n}\n"],"names":["canUseDOM","window","document","createElement","isWindow","element","str","Object","prototype","toString","call","isNode","node","getWindow","target","ownerDocument","_target$ownerDocument2","defaultView","isDocument","Document","isHTMLElement","HTMLElement","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","ids","createAdjustmentFn","modifier","object","adjustments","reduce","accumulator","adjustment","entries","key","valueAdjustment","value","add","subtract","hasViewportRelativeCoordinates","event","isTouchEvent","TouchEvent","CSS","freeze","Translate","transform","x","y","Math","round","Scale","scaleX","scaleY","Transform","join","Transition","property","duration","easing","touches","length","clientX","clientY","changedTouches","KeyboardEvent","SVGElement","refs","useMemo","forEach","ref","intervalRef","useRef","useCallback","listener","current","setInterval","clearInterval","callback","dependencies","valueRef","newValue","setNodeRef","prefix","id"],"mappings":"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"}