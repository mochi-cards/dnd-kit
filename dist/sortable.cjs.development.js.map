{"version":3,"file":"sortable.cjs.development.js","sources":["../src/utilities/arrayMove.ts","../src/utilities/arraySwap.ts","../src/utilities/getSortedRects.ts","../src/utilities/isValidIndex.ts","../src/strategies/horizontalListSorting.ts","../src/strategies/rectSorting.ts","../src/strategies/rectSwapping.ts","../src/strategies/verticalListSorting.ts","../src/components/SortableContext.tsx","../src/hooks/defaults.ts","../src/hooks/utilities/useDerivedTransform.ts","../src/hooks/useSortable.ts","../src/sensors/keyboard/sortableKeyboardCoordinates.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","/**\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\n */\nexport function arraySwap<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n\n  return newArray;\n}\n","import type {\n  LayoutRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  layoutRects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<LayoutRect[]>((accumulator, id, index) => {\n    const layoutRect = layoutRects.get(id);\n\n    if (layoutRect) {\n      accumulator[index] = layoutRect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {LayoutRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  layoutRects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = layoutRects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = layoutRects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.offsetLeft +\n            newIndexRect.width -\n            (activeNodeRect.offsetLeft + activeNodeRect.width)\n          : newIndexRect.offsetLeft - activeNodeRect.offsetLeft,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  layoutRects: LayoutRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: LayoutRect | undefined = layoutRects[index];\n  const previousRect: LayoutRect | undefined = layoutRects[index - 1];\n  const nextRect: LayoutRect | undefined = layoutRects[index + 1];\n\n  if (!currentRect || (!previousRect && !nextRect)) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width)\n      : nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width)\n    : currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  layoutRects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(layoutRects, overIndex, activeIndex);\n\n  const oldRect = layoutRects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  layoutRects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {LayoutRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  layoutRects,\n  overIndex,\n}) => {\n  const activeNodeRect = layoutRects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = layoutRects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.offsetTop +\n            overIndexRect.height -\n            (activeNodeRect.offsetTop + activeNodeRect.height)\n          : overIndexRect.offsetTop - activeNodeRect.offsetTop,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  layoutRects: LayoutRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: LayoutRect | undefined = layoutRects[index];\n  const previousRect: LayoutRect | undefined = layoutRects[index - 1];\n  const nextRect: LayoutRect | undefined = layoutRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height)\n      : nextRect\n      ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height)\n    : previousRect\n    ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height)\n    : 0;\n}\n","import React, {MutableRefObject, useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, LayoutRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {SortingStrategy} from '../types';\nimport {getSortedRects} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: LayoutRect[];\n  strategy: SortingStrategy;\n  wasDragging: MutableRefObject<boolean>;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  wasDragging: {current: false},\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    recomputeLayouts,\n    willRecomputeLayouts,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'string' ? item : item.id\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const wasDragging = useRef(false);\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const isSorting = activeIndex !== -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const sortedRects = getSortedRects(items, droppableRects);\n  const itemsHaveChanged = !isEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isSorting && !willRecomputeLayouts) {\n      // To-do: Add partial recompution of only subset of rects\n      recomputeLayouts();\n    }\n  }, [itemsHaveChanged, isSorting, recomputeLayouts, willRecomputeLayouts]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      wasDragging.current = isDragging;\n    }, 100);\n\n    return () => clearTimeout(timeoutId);\n  }, [isDragging]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects,\n      strategy,\n      wasDragging,\n    }),\n    [\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      sortedRects,\n      useDragOverlay,\n      strategy,\n      wasDragging,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n\nfunction isEqual(arr1: string[], arr2: string[]) {\n  return arr1.join() === arr2.join();\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport {arrayMove} from '../utilities';\n\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\n\nexport const defaultNewIndexGetter: NewIndexGetter = ({\n  id,\n  items,\n  activeIndex,\n  overIndex,\n}) => arrayMove(items, activeIndex, overIndex).indexOf(id);\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {useEffect, useRef, useState} from 'react';\nimport {getBoundingClientRect, LayoutRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<LayoutRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getBoundingClientRect(node.current);\n\n        const delta = {\n          x: initial.offsetLeft - current.offsetLeft,\n          y: initial.offsetTop - current.offsetTop,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {useDraggable, useDroppable, UseDraggableArguments} from '@dnd-kit/core';\nimport {CSS, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {SortingStrategy} from '../types';\nimport {isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultNewIndexGetter,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments extends UseDraggableArguments {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  getNewIndex?: NewIndexGetter;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled,\n  data: customData,\n  getNewIndex = defaultNewIndexGetter,\n  id,\n  strategy: localStrategy,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n    wasDragging,\n  } = useContext(Context);\n  const index = items.indexOf(id);\n  const data = useMemo(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const {rect, node, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n  });\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    wasDragging.current &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        layoutRects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? getNewIndex({id, items, activeIndex, overIndex})\n      : index;\n  const prevItems = useRef(items);\n  const itemsHaveChanged = items !== prevItems.current;\n  const prevNewIndex = useRef(newIndex);\n  const previousContainerId = useRef(containerId);\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: prevNewIndex.current,\n    previousItems: prevItems.current,\n    previousContainerId: previousContainerId.current,\n    transition,\n    wasDragging: wasDragging.current,\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && prevNewIndex.current !== newIndex) {\n      prevNewIndex.current = newIndex;\n    }\n\n    if (containerId !== previousContainerId.current) {\n      previousContainerId.current = containerId;\n    }\n\n    if (items !== prevItems.current) {\n      prevItems.current = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n\n  return {\n    active,\n    attributes,\n    activatorEvent,\n    rect,\n    index,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && prevNewIndex.current === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (shouldDisplaceDragSource || !transition) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n","import {\n  closestCorners,\n  getViewRect,\n  getScrollableAncestors,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {context: {active, droppableContainers, translatedRect, scrollableAncestors}}\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !translatedRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const node = entry?.node.current;\n\n      if (!node) {\n        return;\n      }\n\n      const rect = getViewRect(node);\n      const container: DroppableContainer = {\n        ...entry,\n        rect: {\n          current: rect,\n        },\n      };\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (translatedRect.top + translatedRect.height <= rect.top) {\n            filteredContainers.push(container);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (translatedRect.top >= rect.top + rect.height) {\n            filteredContainers.push(container);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (translatedRect.left >= rect.left + rect.width) {\n            filteredContainers.push(container);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (translatedRect.left + translatedRect.width <= rect.left) {\n            filteredContainers.push(container);\n          }\n          break;\n      }\n    });\n\n    const closestId = closestCorners({\n      active,\n      collisionRect: translatedRect,\n      droppableContainers: filteredContainers,\n    });\n\n    if (closestId) {\n      const newNode = droppableContainers.get(closestId)?.node.current;\n\n      if (newNode) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const newRect = getViewRect(newNode);\n        const offset = hasDifferentScrollAncestors\n          ? {\n              x: 0,\n              y: 0,\n            }\n          : {\n              x: translatedRect.width - newRect.width,\n              y: translatedRect.height - newRect.height,\n            };\n        const newCoordinates = {\n          x: newRect.left - offset.x,\n          y: newRect.top - offset.y,\n        };\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n"],"names":["arrayMove","array","from","to","newArray","slice","splice","length","arraySwap","getSortedRects","items","layoutRects","reduce","accumulator","id","index","layoutRect","get","Array","isValidIndex","defaultScale","scaleX","scaleY","horizontalListSortingStrategy","activeNodeRect","fallbackActiveRect","activeIndex","overIndex","itemGap","getItemGap","newIndexRect","x","offsetLeft","width","y","currentRect","previousRect","nextRect","rectSortingStrategy","newRects","oldRect","newRect","offsetTop","height","rectSwappingStrategy","verticalListSortingStrategy","overIndexRect","ID_PREFIX","Context","React","createContext","containerId","disableTransforms","useDragOverlay","sortedRects","strategy","wasDragging","current","SortableContext","children","userDefinedItems","active","dragOverlay","droppableRects","over","recomputeLayouts","willRecomputeLayouts","useDndContext","useUniqueId","Boolean","rect","useMemo","map","item","isDragging","useRef","indexOf","isSorting","previousItemsRef","itemsHaveChanged","isEqual","useIsomorphicLayoutEffect","useEffect","timeoutId","setTimeout","clearTimeout","contextValue","Provider","value","arr1","arr2","join","defaultNewIndexGetter","defaultAnimateLayoutChanges","newIndex","previousItems","previousContainerId","transition","defaultTransition","duration","easing","transitionProperty","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","useDerivedTransform","disabled","node","derivedTransform","setDerivedtransform","useState","previousIndex","initial","getBoundingClientRect","delta","requestAnimationFrame","useSortable","animateLayoutChanges","attributes","userDefinedAttributes","data","customData","getNewIndex","localStrategy","globalStrategy","useContext","sortable","setNodeRef","setDroppableNodeRef","useDroppable","activatorEvent","setDraggableNodeRef","listeners","transform","useDraggable","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","prevItems","prevNewIndex","shouldAnimateLayoutChanges","getTransition","undefined","directions","KeyboardCode","Down","Right","Up","Left","sortableKeyboardCoordinates","event","context","droppableContainers","translatedRect","scrollableAncestors","includes","code","preventDefault","filteredContainers","getEnabled","forEach","entry","getViewRect","container","top","push","left","closestId","closestCorners","collisionRect","newNode","newScrollAncestors","getScrollableAncestors","hasDifferentScrollAncestors","some","element","offset","newCoordinates"],"mappings":"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"}